//- views/game/waiting-room.pug - Game Waiting Room
extends ../layout

block content
  .waiting-room
    h1 Quest Waiting Room
    
    .card
      h2#gameTitle Loading game...
      .game-code
        span Game Code: 
        strong#gameCodeDisplay Loading...
      p Share this code with other players to join your quest!
      
    .card
      h3 Players in Quest
      .players-list#playersList
        p Waiting for players...
        
    .card
      h3 Game Settings
      .game-settings#gameSettings
        p Loading settings...
        
    .game-controls#gameControls
      button.btn.btn-primary#startGameBtn(disabled) Waiting for Players...
      button.btn.btn-danger#leaveDeleteBtn Leave Quest
      
    .alert#alert(style='display: none;')

block scripts
  script.
    const gameId = '#{gameId}';
    let socket;
    let currentUser;
    
    document.addEventListener('DOMContentLoaded', async () => {
      const token = localStorage.getItem('token');
      const user = localStorage.getItem('user');
      
      if (!token || !user) {
        window.location.href = '/login';
        return;
      }
    
    function showAlert(message, type) {
      const alertDiv = document.getElementById('alert');
      alertDiv.className = `alert alert-${type}`;
      alertDiv.textContent = message;
      alertDiv.style.display = 'block';
      
      setTimeout(() => {
        alertDiv.style.display = 'none';
      }, 5000);
    }
      
      currentUser = JSON.parse(user);
      
      // Load initial game data
      await loadGameData();
      
      // Set up auto-refresh every 3 seconds to update player list
      setInterval(loadGameData, 3000);
    });
    
    async function loadGameData() {
      try {
        const token = localStorage.getItem('token');
        const response = await fetch(`/api/games/${gameId}`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          updateGameDisplay(data);
        } else if (response.status === 404) {
          // Game was deleted, redirect to dashboard
          showAlert('Game no longer exists. Redirecting...', 'info');
          setTimeout(() => {
            window.location.href = '/dashboard';
          }, 2000);
        } else {
          showAlert('Error loading game data', 'error');
        }
      } catch (error) {
        console.error('Error loading game:', error);
        showAlert('Failed to load game data', 'error');
      }
    }
    
    function updateGameDisplay(data) {
      const game = data.game;
      const players = data.players;
      
      document.getElementById('gameTitle').textContent = game.game_name;
      document.getElementById('gameCodeDisplay').textContent = game.game_code;
      
      // Update game settings
      const settings = document.getElementById('gameSettings');
      settings.innerHTML = `
        <div class="setting-item">
          <span class="setting-label">Max Players:</span>
          <span class="setting-value">${game.max_players}</span>
        </div>
        <div class="setting-item">
          <span class="setting-label">Status:</span>
          <span class="setting-value">${game.status}</span>
        </div>
        <div class="setting-item">
          <span class="setting-label">Created by:</span>
          <span class="setting-value">${game.creator_name}</span>
        </div>
      `;
      
      updatePlayersList(players || []);
      updateStartButton(game, players);
    }
    
    function updatePlayersList(players) {
      const playersList = document.getElementById('playersList');
      
      if (players.length === 0) {
        playersList.innerHTML = '<p>Waiting for players...</p>';
        return;
      }
      
      playersList.innerHTML = players.map((player, index) => `
        <div class="player-item">
          <div class="player-token player-${index + 1}"></div>
          <div class="player-info">
            <span class="player-name">${player.username}</span>
            <span class="player-status">Player ${player.player_order}</span>
          </div>
        </div>
      `).join('');
    }
    
    function updateStartButton(game, players) {
      const startBtn = document.getElementById('startGameBtn');
      const leaveDeleteBtn = document.getElementById('leaveDeleteBtn');
      const minPlayers = players && players.length >= 2;
      const isCreator = game.created_by === currentUser.id; // Changed from currentUser.user_id to currentUser.id
      
      // Update start button
      if (isCreator && minPlayers && game.status === 'waiting') {
        startBtn.disabled = false;
        startBtn.textContent = 'Start Quest!';
        startBtn.onclick = startGame;
      } else if (isCreator) {
        startBtn.disabled = true;
        if (!minPlayers) {
          startBtn.textContent = 'Need at least 2 players';
        } else if (game.status !== 'waiting') {
          startBtn.textContent = 'Game already started';
        }
      } else {
        startBtn.style.display = 'none';
      }
      
      // Update leave/delete button
      if (isCreator) {
        leaveDeleteBtn.textContent = 'Delete Quest';
        leaveDeleteBtn.className = 'btn btn-danger';
        leaveDeleteBtn.onclick = deleteGame;
      } else {
        leaveDeleteBtn.textContent = 'Leave Quest';
        leaveDeleteBtn.className = 'btn btn-secondary';
        leaveDeleteBtn.onclick = leaveGame;
      }
    }
    
    async function startGame() {
      try {
        const token = localStorage.getItem('token');
        const response = await fetch(`/api/games/${gameId}/start`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (response.ok) {
          showAlert('Quest is starting!', 'success');
          setTimeout(() => {
            window.location.href = `/game/${gameId}`;
          }, 2000);
        } else {
          const data = await response.json();
          showAlert(data.message || 'Failed to start game', 'error');
        }
      } catch (error) {
        console.error('Start game error:', error);
        showAlert('Network error. Please try again.', 'error');
      }
    }
    
    async function deleteGame() {
      if (!confirm('Are you sure you want to delete this quest? This cannot be undone.')) {
        return;
      }
      
      try {
        const token = localStorage.getItem('token');
        const response = await fetch(`/api/games/${gameId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        if (response.ok) {
          showAlert('Quest deleted successfully', 'success');
          setTimeout(() => {
            window.location.href = '/dashboard';
          }, 1500);
        } else {
          const data = await response.json();
          showAlert(data.message || 'Failed to delete quest', 'error');
        }
      } catch (error) {
        console.error('Delete game error:', error);
        showAlert('Network error. Please try again.', 'error');
      }
    }
    
    async function leaveGame() {
      if (!confirm('Are you sure you want to leave this quest?')) {
        return;
      }
      
      try {
        const token = localStorage.getItem('token');
        const response = await fetch(`/api/games/${gameId}/leave`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (response.ok) {
          showAlert('Left quest successfully', 'success');
          setTimeout(() => {
            window.location.href = '/dashboard';
          }, 1500);
        } else {
          const data = await response.json();
          showAlert(data.message || 'Failed to leave quest', 'error');
        }
      } catch (error) {
        console.error('Leave game error:', error);
        showAlert('Network error. Please try again.', 'error');
      }
    }
    
    function showAlert(message, type) {
      const alertDiv = document.getElementById('alert');
      alertDiv.className = `alert alert-${type}`;
      alertDiv.textContent = message;
      alertDiv.style.display = 'block';
      
      setTimeout(() => {
        alertDiv.style.display = 'none';
      }, 5000);
    }